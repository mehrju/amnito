@using Nop.Web.Models.Customer
@model CustomerAddressListModel
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
    //page class
    Html.AppendPageCssClassParts("html-account-page");
    Html.AppendPageCssClassParts("html-address-list-page");
}
@section left
{
    @await Component.InvokeAsync("CustomerNavigation", new { selectedTabId = CustomerNavigationEnum.Addresses })
}
@section accountPageTitle
{
    <div class="page-title">
        <h1>@T("Account.MyAccount") - @T("Account.CustomerAddresses")</h1>
    </div>
}
<div class="page account-page address-list-page">
    <div class="page-body">
        <nop-antiforgery-token />
        <div class="add-button address-item">
            <input type="button" class="button-1 add-address-button" onclick="location.href='@Url.RouteUrl("CustomerAddressAdd")'" value="@T("Common.AddNew")" />
        </div>
        @if (Model.Addresses.Count > 0)
        {
            var Addresses = Model.Addresses.OrderByDescending(p => p.Id).ToList();
            <div style="text-align:right;font-size:14pt;color:forestgreen" class="fa-hover">
                <input type="button" id="deleteSelected" class="button-2 delete-address-button" style="background-color:orange" value="حذف موارد انتخابی">
            </div>
                <div class="address-list">
                    @for (var i = 0; i < Addresses.Count; i++)
                    {
                        var address = Addresses[i];
                        <div class="section address-item">
                            <div class="title">
                                <strong>@address.FirstName @address.LastName</strong>
                            </div>
                            <ul class="info">
                                <li class="name">
                                    @address.FirstName @address.LastName
                                </li>
                                <li class="email">
                                    <label>@T("Address.Fields.Email"):</label>
                                    @address.Email
                                </li>
                                @if (address.PhoneEnabled)
                                {
                                    <li class="phone">
                                        <label>@T("Address.Fields.PhoneNumber"):</label>
                                        @address.PhoneNumber
                                    </li>
                                }
                                @if (address.FaxEnabled)
                                {
                                    <li class="fax">
                                        <label>@T("Address.Fields.FaxNumber"):</label>
                                        @address.FaxNumber
                                    </li>
                                }
                                @if (address.CompanyEnabled && !string.IsNullOrEmpty(address.Company))
                                {
                                    <li class="company">@address.Company</li>
                                }
                                @if (address.StreetAddressEnabled)
                                {
                                    <li class="address1">
                                        @address.Address1
                                    </li>
                                }
                                @if (address.StreetAddress2Enabled && !string.IsNullOrEmpty(address.Address2))
                                {
                                    <li class="address2">
                                        @address.Address2
                                    </li>
                                }
                                @if (address.CityEnabled || address.StateProvinceEnabled || address.ZipPostalCodeEnabled)
                                {
                                    var cityStateZip = "";
                                    if (address.CityEnabled)
                                    {
                                        cityStateZip = address.City;
                                        if (address.StateProvinceEnabled || address.ZipPostalCodeEnabled)
                                        {
                                            cityStateZip += ",";
                                        }
                                    }
                                    if (address.StateProvinceEnabled)
                                    {
                                        if (!string.IsNullOrEmpty(cityStateZip))
                                        {
                                            cityStateZip += " ";
                                        }
                                        cityStateZip += address.StateProvinceName;
                                    }
                                    if (address.ZipPostalCodeEnabled)
                                    {
                                        if (!string.IsNullOrEmpty(cityStateZip))
                                        {
                                            cityStateZip += " ";
                                        }
                                        cityStateZip += address.ZipPostalCode;
                                    }

                                    <li class="city-state-zip">
                                        @cityStateZip
                                    </li>
                                }
                                @if (address.CountryEnabled && !string.IsNullOrEmpty(address.CountryName))
                                {
                                    <li class="country">
                                        @address.CountryName
                                    </li>
                                }
                                @if (!string.IsNullOrEmpty(address.FormattedCustomAddressAttributes))
                                {
                                    <li class="custom-attributes-view">
                                        @Html.Raw(address.FormattedCustomAddressAttributes)
                                    </li>
                                }
                            </ul>
                            <div class="buttons">
                                <input type="button" class="button-2 edit-address-button" onclick="location.href = '@(Url.RouteUrl("CustomerAddressEdit", new {addressId = address.Id}))'" value="@T("Common.Edit")" />
                                <input type="button" class="button-2 delete-address-button" onclick="deletecustomeraddress(@(address.Id))" value="@T("Common.Delete")" />
                                <div style="float: left;background-color: #f1f1f1;">
                                    <input type="checkbox" class="addressCheck" style="position:inherit !important; min-width: 45px;margin-top: 15px;margin-bottom: 12px;" data-Id="@(address.Id)">
                                </div>
                            </div>
                        </div>
                    }

                </div>
                <script type="text/javascript" asp-location="Footer">
                    $('#deleteSelected').click(function () {
                        if ($('.addressCheck:checked ').size() == 0) {
                            alert('ابتدا آدرس های مورد نظر را انتخاب کنید')
                            return;
                        }
                        var addressIds = [];
                        $('.addressCheck:checked ').each(function () {
                            addressIds.push($(this).attr('data-Id'));
                        });
                        if (confirm('@T("Admin.Common.AreYouSure")')) {
                            var postData = {
                                LstAddressId: addressIds
                            };
                            addAntiForgeryToken(postData);

                            $.ajax({
                                cache: false,
                                type: 'POST',
                                url: '@Url.Action("AddressDelete", "MultiShippingCheckout")',
                                data: postData,
                                dataType: 'json',
                                success: function(data) {
                                    location.href = data.redirect;
                                },
                                error: function(xhr, ajaxOptions, thrownError) {
                                    alert('Failed to delete');
                                }
                            });
                        }
                    });
                    function deletecustomeraddress(addressId) {
                        if (confirm('@T("Admin.Common.AreYouSure")')) {
                            var postData = {
                                addressId: addressId
                            };
                            addAntiForgeryToken(postData);

                            $.ajax({
                                cache: false,
                                type: 'POST',
                                url: '@Url.Action("AddressDelete", "Customer")',
                                data: postData,
                                dataType: 'json',
                                success: function(data) {
                                    location.href = data.redirect;
                                },
                                error: function(xhr, ajaxOptions, thrownError) {
                                    alert('Failed to delete');
                                }
                            });
                        }
                    }
                </script>
                }
                else
                {
                <div class="no-data">
                    @T("Account.CustomerAddresses.NoAddresses")
                </div>
                }

            </div>
        </div>