@model Mus_ShoppingCartModel
@using Nop.Core
@using Nop.Core.Domain.Tax
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Mvc;
@using Nop.Web.Controllers;
@using Nop.Core.Http.Extensions
@using Newtonsoft.Json;

@inject IHttpContextAccessor HttpContextAccessor
@inject IWebHelper webHelper
@inject IWorkContext workContext

@{
    var supportRtl = workContext.WorkingLanguage.Rtl;
    List<ShipmentValues> listOfShipmentInfo = HttpContextAccessor.HttpContext.Session.Get<List<ShipmentValues>>("ShipmentValues");
    var maxNumberOfShipments = listOfShipmentInfo.Max(x => x.ShipmentNumber);
    var addresses = HttpContextAccessor.HttpContext.Session.Get<List<AddressModel>>("Addresses");
    ViewData["addresses"] = addresses;
    if (supportRtl)
    {
        Html.AppendCssFileParts("~/lib/bootstrap/css/bootstrap.rtl.css");
    }
    else
    {
        Html.AppendCssFileParts("~/lib/bootstrap/css/bootstrap.min.css");
    }
    Html.AppendCssFileParts("~/lib/fontAwesome/css/font-awesome-4.6.3.min.css");
    Html.AppendCssFileParts("~/lib/jquery-ui-themes/smoothness/jquery-ui-1.10.3.custom.min.css");
    Html.AppendScriptParts("~/lib/jquery-ui-1.10.3.custom.min.js");
    Html.AppendScriptParts("~/lib/bootstrap/bootstrap.min.js");
    Html.AddCssFileParts(ResourceLocation.Footer, "~/Plugins/Orders.MultiShipping/Scripts/select2.min.css");
    Html.AddScriptParts(ResourceLocation.Footer, "~/Plugins/Orders.MultiShipping/Scripts/select2.full.min.js");

}
<script>
        maxNumberOfShipments = @maxNumberOfShipments
        addresses = @Html.Raw(Json.Serialize(ViewData["addresses"]));;
</script>
<style>
    .modal-backdrop {
        z-index: 1040 !important;
    }

    .modal-dialog {
        margin: 2px auto;
        z-index: 1100 !important;
    }
</style>
<div class="order-summary-content cart-table-container">
    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_before" })
    @await Html.PartialAsync("_Mus_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {


        if (Model.Warnings.Count > 0)
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }

        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
        <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            <div class="table-wrapper shopping-cart-table-structure" style="margin: auto;float:unset !important;text-align:center">
                <table class="cart mz-table mz-table-cart">
                    <colgroup>
                        @*@if (Model.ShowSku)
                            {
                                <col width="1" />
                            }*@
                        @if (Model.ShowProductImages)
                        {
                            <col width="1" />
                        }
                        <col />
                        <col width="1" />
                        <col width="1" />
                        <col width="1" />
                        @if (Model.IsEditable)
                        {
                            <col width="1" />
                        }
                    </colgroup>
                    <thead class="hide-mobile">
                        <tr>
                            @*@if (Model.ShowSku)
                                {
                                    <th class="sku">
                                        @T("ShoppingCart.SKU")
                                    </th>
                                }*@
                            @if (Model.ShowProductImages)
                            {
                                <th class="product-picture mz-carttable-header-product">
                                    @T("ShoppingCart.Image")
                                </th>
                            }
                            <th class="product mz-carttable-header-desc">
                                @T("ShoppingCart.Product(s)")
                            </th>

                            <th class="subtotal mz-carttable-header-total">
                                آدرس
                            </th>
                            @if (Model.IsEditable)
                            {
                                <th class="remove-from-cart">
                                    @*@T("ShoppingCart.Remove")*@
                                </th>
                            }
                        </tr>
                    </thead>
                    @{
                        listOfShipmentInfo = listOfShipmentInfo.OrderBy(x => x.ShipmentNumber).ToList();
                        var curShipment = 0;
                        var newShipmentLine = true;
                    }
                    <tbody class="mz-table-cart-items">
                        @foreach (var shipment in listOfShipmentInfo)
                        {
                            if (Int32.Parse(shipment.ShipmentNumber) != curShipment)
                            {
                                curShipment = Int32.Parse(shipment.ShipmentNumber);
                                newShipmentLine = true;
                                <tr><td colspan="3" style="background-color:#eaeaea">مقصد #@shipment.ShipmentNumber</td></tr>
                            }
                            else
                            {
                                newShipmentLine = false;
                            }
                            @foreach (var item in Model.Items)
                            {
                                if (Int32.Parse(shipment.ItemNumber) != item.Id)
                                {
                                    continue;
                                }
                                <tr class="mz-carttable-item">
                                    @*@if (Model.ShowSku)
                                        {
                                            <td class="sku">
                                                <label class="td-title">@T("ShoppingCart.SKU"):</label>
                                                <span class="sku-number">@item.Sku</span>
                                            </td>
                                        }*@
                                    @if (Model.ShowProductImages)
                                    {
                                        <td class="product-picture mz-carttable-item-product">
                                            <a href="@Url.RouteUrl("Product", new { SeName = item.PackProductSeName ?? item.ProductSeName })"><img style="width:120px" class="mz-carttable-item-image" alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" /></a>
                                        </td>
                                    }
                                    <td class="product mz-carttable-item-desc" style="padding-left:25px;">
                                        <div class="mz-carttable-item-info-wrap">
                                            <a href="@Url.RouteUrl("Product", new { SeName = item.PackProductSeName ?? item.ProductSeName })" class="product-name mz-carttable-item-title">@item.ProductName</a>
                                        </div>
                                        @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                        {
                                            @*<div class="attributes">
                                                    @Html.Raw(item.AttributeInfo)
                                                </div>*@
                                        }
                                        @if (!string.IsNullOrWhiteSpace(item.WeightOz))
                                        {
                                            <div class="weight">
                                                <span class="gray">Weight &nbsp;</span>
                                                <b>@item.WeightOz</b>
                                                <br />
                                                <span class="gray">Quantity &nbsp;</span>
                                                <b>@item.Quantity</b>
                                            </div>
                                        }


                                        @if (!string.IsNullOrEmpty(item.RecurringInfo))
                                        {
                                            <div class="recurring-info">
                                                @Html.Raw(item.RecurringInfo)
                                            </div>
                                        }
                                        @if (!string.IsNullOrEmpty(item.RentalInfo))
                                        {
                                            <div class="rental-info">
                                                @Html.Raw(item.RentalInfo)
                                            </div>
                                        }
                                        @if (Model.IsEditable && item.AllowItemEditing)
                                        {
                                            var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName });
                                            editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid=" + item.Id, null);
                                            <div class="edit-item">
                                                <a href="@editCartItemUrl">@T("Common.Edit")</a>
                                            </div>
                                        }
                                        @if (item.Warnings.Count > 0)
                                        {
                                            <div class="message-error">
                                                <ul>
                                                    @foreach (var warning in item.Warnings)
                                                    {
                                                        <li>@warning</li>
                                                    }

                                                </ul>
                                            </div>
                                        }
                                        @*<ul>
                                            @if (item.AvailableStartDateTimeUtc != null || item.AvailableEndDateTimeUtc != null)
                                            {
                                                <li style="color: #d56b0d;">
                                                    Ordering available from
                                                    <strong style="color:#ad0031">@item.AvailableStartDateTimeUtc - @item.AvailableEndDateTimeUtc</strong>
                                                </li>
                                            }
                                            @if (item.PreOrderAvailabilityStartDateTimeUtc != null)
                                            {
                                                <li style="color: #d56b0d;">
                                                    Delivery available after
                                                    <strong style="color:#ad0031">@item.PreOrderAvailabilityStartDateTimeUtc</strong>
                                                </li>
                                            }
                                        </ul>*@
                                    </td>
                                    <td style="min-width:250px;padding:unset">
                                        @{
                                            var currentItemShipmentNumber = listOfShipmentInfo.Where(x => x.ItemNumber.Equals(item.Id.ToString())).First().ShipmentNumber;
                                        }
                                        @if (newShipmentLine)
                                        {
                                            <div style="float:right">
                                                <select class="addressSelect" id="addressSelect_@curShipment" style="min-width:230px" onchange="changeAddress(@curShipment, this)">
                                                </select>
                                            </div>
                                            <div style="float:right;min-width:20px">
                                                <button type="button" title="اضافه کردن آدرس جدید" id="AddAddress_@curShipment"
                                                        style="font-family:'emporium-icons' !important;float:right"
                                                        class="AddAddress" data-selectId="addressSelect_@curShipment">
                                                    i
                                                </button>
                                            </div>
                                        }
                                        <br />
                                        <div id="addressFull_@curShipment"></div>
                                    </td>

                                </tr>
                            }
                        }

                    </tbody>
                </table>
                <input id="SelectdSelect" type="hidden"/>
            </div>
            @if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
            {
                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <div class="tax-shipping-info">
                    @T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                </div>
            }
            <div class="cart-options">
                @if (Model.IsEditable)
                {
                    <div class="common-buttons">
                        <input type="submit" name="updatecart" value="@T("ShoppingCart.UpdateCart")" class="button-2 update-cart-button" style="display:none;" />
                        <input type="submit" name="continueshopping" value="@T("ShoppingCart.ContinueShopping")" class="button-2 continue-shopping-button" />
                        <em class="mz-auxiliary-text">Tax &amp; Shipping Calculated at Checkout</em>
                    </div>
                }
                @if (Model.IsEditable)
                {
                    @await Html.PartialAsync("_Mus_CheckoutAttributes", Model)
                }
                @await Component.InvokeAsync("SelectedCheckoutAttributes")
            </div>

            @if (Model.IsEditable)
            {
                @await Component.InvokeAsync("CrossSellProducts")
            }
        </form>
    }
    else
    {
        <div class="no-data">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_after" })
    <script>
        $(document).ready(function () {
            $(".cart td, .cart th").css("border-width", "0px");

            $(".lb-input-dec").click(function () {
                var $button = $(this);
                var oldValue = $button.parent().find(".lb-input").val();
                if (oldValue > 1) {
                    var newval = parseInt(oldValue) - 1;
                    $button.parent().find(".mz-carttable-qty-field").val(newval);
                    var price = $button.closest(".mz-carttable-item").find(".unit-price > .product-unit-price").text().replace('$', '');
                    var totalPrice = (parseFloat(price) * newval).toFixed(2);
                    $button.closest(".mz-carttable-item").find(".subtotal > .product-subtotal").text('$' + totalPrice);

                    updateCart_Post(1000);
                }
            });
            $(".lb-input-inc").on("click", function () {
                var $button = $(this);
                var oldValue = $button.parent().find(".lb-input").val();
                var newval = parseInt(oldValue) + 1;
                $button.parent().find(".mz-carttable-qty-field").val(newval);
                var price = $button.closest(".mz-carttable-item").find(".unit-price > .product-unit-price").text().replace('$', '');
                var totalPrice = (parseFloat(price) * newval).toFixed(2);
                $button.closest(".mz-carttable-item").find(".subtotal > .product-subtotal").text('$' + totalPrice);

                updateCart_Post(1000);
            });
            $(".lb-input").on('change', function () {
                updateCart_Post(1000);
            });
            $('select').select2({
                placeholder: "جستجوی آدرس های موجود",
                minimumInputLength: 3,
                ajax: { // instead of writing the function to execute the request we use Select2's convenient helper
                    url: '@Url.Action("FetchAddress", "MultiShippingCheckout")',
                    dataType: 'json',
                    quietMillis: 250,
                    data: function (term, page) {
                        return {'searchtext': term.term};
                    },
                    results: function (data, page) { // parse the results into the format expected by Select2.
                        debugger;                    // since we are using custom formatting functions we do not need to alter the remote JSON data
                        return { results: data };
                    },
                    cache: true
                },
                dropdownCssClass: "bigdrop", // apply css that makes the dropdown taller
            });
        });
        function removeFromCart_Post(ele, id) {
            $('[name="removefromcart"]', $(ele)).val(id).click();

            updateCart_Post();
        }

        var _updateCart_Post;

        function updateCart_Post(timeOut) {

            if (_updateCart_Post)
                clearTimeout(_updateCart_Post);

            _updateCart_Post = setTimeout(function () {
                $('#shopping-cart-form [name="updatecart"]').click();
            }, timeOut || 100);

        }
    </script>


</div>
<div class="modal fade" id="divAddNewaddress" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="exampleModalLabel" style="float:right">آدرس جدید را وارد نمایید</h3>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="divAddNewaddress_content" style="z-index:1010 !important">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">انصراف</button>
                <input name="saveNewAddress" id="saveNewAddress" value="ذخیره" type="button" class="btn btn-primary" />
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $('.AddAddress').click(function () {
            $('#divAddNewaddress_content').html('');
            $('#divAddNewaddress').modal('show',{ backdrop: 'static' });
            $('#divAddNewaddress').appendTo("body");
            $('#SelectdSelect').val($(this).attr('data-selectId'));
        });
       
        $('#divAddNewaddress').on('show.bs.modal', function (event) {
            debugger;
            $form = $('<form id="newBillingForm" method="post"></form>');
            $('#divAddNewaddress_content').append($form);
            $form.load("@Url.Action("ShowNewBillingAddress", "MultiShippingCheckout")", function () {
                $('#newBillingForm').find('.inputs').addClass('form-group');
                $('#newBillingForm').find('.inputs').find('input').addClass('form-control');
                $('#newBillingForm').find('.inputs').find('select').addClass('form-control');
                $('#newBillingForm').find('.inputs').removeClass('inputs');
                $('<input type="submit" style="display:none" id="myButton1" />').appendTo($form);
               
                $("#newBillingForm").submit(function (event) {
                
                    event.preventDefault();
                    var $form = $(this),
                    url = '@(Url.Action("AddNewAddress", "MultiShippingCheckout"))';
                    var formData = JSON.parse(JSON.stringify($('#newBillingForm').serializeArray()))
                    var posting = $.post(url, formData);
                    posting.done(function (data) {
                            if (data.result == true) {
                                $('#divAddNewaddress').modal('hide');
                                var newState = new Option(data.address,data.Id, true, true);
                                $(`#${$('#SelectdSelect').val()}`).append(newState).trigger('change');
                            }
                            alert(data.message);
                    });
                });
            });
        });
   
        $('#saveNewAddress').click(function () {
            $('#myButton1').click();
        });
    }); 
   
    function changeAddress(curShipment, addr) {
    }
</script>
<script type="text/javascript" asp-location="Footer">
    $(document).ready(function () {
        $('#checkout').click(function () {
            $.ajax({
                url: "/Customer/LoginSignupPopup",
                success: function (data) {
                    $('#loginModal').css("display", "block");
                    $('#loginModal').html(data);
                    $('#loginModal .login-modal').css("display", "block");
                    $('.sectionforcheckout').css("display", "block");
                    $('.sectionforlogin').css("display", "none");

                },
                error: function () {
                    $("#loginModal").html('Page not Found');
                }
            });
        });
    });
    
</script>
